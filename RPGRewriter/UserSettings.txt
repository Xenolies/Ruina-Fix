// To modify settings, change the number following the = sign to one of the options listed below.


@CommandIndents=0
// 1: Indents
// 0: No Indents [Default]

// Sets whether to include command indents in scripts.
// While good for readability when there are conditions and choice branches, it can be annoying when doing line-by-line comparisons between scripts.


@WordWrap=0
// 1: Wrap
// 0: No Wrap [Default]

// Word wrap is an option applied only when using Import Editable Scripts.
// If the messages in input scripts have lines that exceed the character limit, they will be broken up into separate lines (at spaces only).
// Manual linebreaks will remain the same.


@WrapLineLimits=1
// 1: Assume Width [Default]
// 2: Full-Width Textboxes
// 3: Textboxes With Faces

// Determines which character limit to employ for word wrap.
// Full-width textboxes can fit 50 characters max, while textboxes with faces can fit only 38.
// Assume Width guesses which mode it should use based on preceding face-set commands, but in some cases with conditional branches, this is not foolproof.


@WrapStyle=1
// 1: Even [Default]
// 2: Immediate

// Sets the style of word wrapping.
// "Even" mode tries to wrap text so that the resulting lines are of approximately equal length.
// (More specifically, it won't let lines surpass the "average length of each line," except for the last one.)
// "Immediate" mode wraps text as soon as a word goes over the limit.


@LogFilename=log
// Default: log
// ".txt" extension is automatically added.

// Specifies the filename of the log file.
// Certain modes may write a log file containing results in the program directory.


@SuperVerboseStrings=0
// 1: Verbose Strings
// 0: Standard Strings [Default]

// Sets how much data is included in extracted scripts.
// Normally, certain data is not included in scripts (because it's typically totally irrelevant). Enabling this will include that data anyway for completeness.
// Notable examples include "save counts" (the number of times the file has been saved), editor-only settings like Battle Test settings, and data whose purpose is not (yet?) known.
// This option also includes tile data in map scripts, which is normally relegated to the function that extracts only tile data.


@StringScriptDetails=0
// 1: Include Extra Details in StringScripts
// 0: Only Include Strings [Default]

// Whether to have exported StringScripts include helpful commands and other info for reference's sake.
// Enabling this includes extra stuff that may give context to the strings as you edit them, which can be helpful, but may be unwanted clutter.
// These are not recognized as actual data/commands, so they are ignored on import.

// You can configure exactly what is included when this is enabled by changing the values in the "IncludeInDetailedMode" section below (1 to include, 0 to not include). Some recommended ones to use are:
// DataNames - Use names for things in databases instead of just numbers
// MapHeader - Header with name of map
// EventCoordinates - Include coordinates for events to more easily locate them in the map editor
// PageConditions - Trigger conditions for pages, shown before page content
// CommandBranch - Branching commands
// CommandBranchCases - Case names for branches
// CommandMessageFace - Commands that set current face for textbox
// CommandTeleport - Commands that move player to another map
// CommandChangeItems - Commands that give or take away items

// Enabling OriginalCommandStrings or OriginalDatabaseStrings will have StringScripts include the original, untranslated strings as comments above each command or field respectively, for easy reference.
// These strings are sourced from an "OriginalStringsDB.json" file, generated whenever you export StringScripts with either setting enabled and the file does not yet exist, under the assumption nothing has been translated at that point.
// If this is not the case, or you otherwise need to bring it up to date, you should generate an OriginalStringsDB.json for the original untranslated project and copy it over to the translated project.

##IncludeInDetailedMode##
DataNames=1
MapHeader=1
MapSettings=0
EventCoordinates=1
EventName=0
PageConditions=1
PageSettings=0
LineNumber=0
OriginalCommandStrings=0
OriginalDatabaseStrings=0
CommandBranch=1
CommandBranchCases=1
CommandMessageFace=1
CommandTeleport=1
CommandChangeItems=1
CommandChangeSwitch=0
CommandChangeVariable=0
CommandCallEvent=0
CommandShowPicture=0
CommandMovePicture=0
CommandErasePicture=0
CommandPlayMusic=0
CommandMusicControls=0
CommandSound=0
CommandMovie=0
CommandWait=0
CommandMoveEvent=0
CommandMoveEventControls=0
CommandGetTileTerrainOrEventID=0
CommandMessageOptions=0
CommandShowAnimation=0
CommandScreenEffects=0
CommandSetScreenTransition=0
CommandEventEffects=0
CommandFullRecovery=0
CommandDamage=0
CommandChangeMoney=0
CommandChangePartyParams=0
CommandChangePartyGraphics=0
CommandChangeVariousSystemFiles=0
CommandChangeMapSettings=0
CommandChangeMapTile=0
CommandInputNumber=0
CommandKeyInput=0
CommandTimer=0
CommandCallNameEntry=0
CommandCallMenus=0
CommandOpenShopOrInn=0
CommandBattleStart=0
CommandMidBattleControls=0
CommandEndOrExitGame=0
CommandOpenVideoOptions=0
CommandLoop=0
CommandStopParallelEvents=0
CommandEraseEvent=0
CommandPlaceEventOrSwapEvents=0
CommandVehicleControls=0
CommandRememberRestorePlace=0
CommandEnableDisableFunctions=0
CommandSetTeleportOrEscapeDestination=0
CommandToggleATBMode=0
CommandToggleFullscreen=0
CommandComment=0
CommandLabel=0
##


@StringScriptExtraneous=0
// 1: Include Extraneous Strings in StringScripts
// 0: Only Include Necessary Strings [Default]

// Whether to have exported StringScripts include certain "extraneous" strings that never really "need" to be translated.
// These are not included by default since they will never actually appear in-game. But you may want to translate them anyway in some circumstances, usually if you're opening the game in the actual editor.
// All of these strings fall into the "miscellaneous" category and thus will use that read/write encoding.
// Extraneous strings will be imported regardless of settings as long as they're present in the StringScript files.

// You can configure exactly what is included when this is enabled by changing the values in the "ExtraneousStrings" section below (1 to include, 0 to not include).

##ExtraneousStrings##
MapNames=0
SwitchNames=0
VariableNames=0
CommonEventNames=0
MapEventNames=0
TroopNames=0
##


@IgnoreLengthLimits=0
// 2: Enforce Limits Except For $S Messages
// 1: Don't Enforce Any Limits
// 0: Enforce Limits [Default]

// Whether to enforce character limits on database strings when using import function.
// By default, strings in the database cannot be any longer than you would be allowed in the RPG Maker editor, and will be truncated to fit.
// However, the rules on this can be odd depending on the language, and the limits can be restrictive, so you may want to ignore them sometimes.
// Other than the obvious (overlapping text in menus), the engine seems perfectly able to handle strings longer than their limits, but you should be careful anyway.
// Setting this to 2 will enforce limits for most text, but not for battle messages that support the $S/$O/$V/$U placeholders added in English RM2K.


@ForceEngineVersion=0
// 1: RPG Maker 2000 (Japanese)
// 2: RPG Maker 2000 (Official English)
// 3: RPG Maker 2003
// 0: Don't Change Engine Version [Default]

// Barebones functionality for enforcing a specific engine version when doing any kind of rewriting function.
// You generally won't need to bother with this, as RPG_RT.exe itself decides most functionality. It is sometimes important for EasyRPG support, however, which relies on the data files to determine version.
// A notable case is using RPG Maker 2000 English formatting for battle messages; if the version is not set to RM2K English, EasyRPG will not properly display messages using placeholders like %S.


@NoteUnchanged=0
// 1: List Unchanged Files
// 0: Don't List Unchanged Files [Default]

// Whether to list all processed files when importing strings, or just the changed ones.
// String importing only touches files if there is something to change in them. If this option is enabled, it will let you know about skipped files by saying "No changes necessary for ___."



// All the following settings set the default program options upon startup. These options can be changed from their defaults in the program.

@Mode=1
// 1: Extracting [Default]
// 2: Rewriting
// 3: Checking

@FileScope=1
// 1: All Files [Default]
// 0: Single File

@ExtractIncludeMessages=1
// 1: Include [Default]
// 0: Skip

@ExtractIncludeActions=1
// 1: Include [Default]
// 0: Skip

@ExtractUseDataNames=0
// 1: Use Names
// 0: Use Numbers [Default]

@ExtractRewriteStrings=0
// 1: Use Rewritten Strings
// 0: Keep Original Strings [Default]

@ExtractBlankOutMessages=1
// 1: Blank Out Messages [Default]
// 0: Omit Messages Entirely

@CheckMessageValidity=1
// 1: Check [Default]
// 0: Don't Check

@CheckFileReferences=1
// 1: Check [Default]
// 0: Don't Check

@CheckUnusedFiles=0
// 1: Check
// 0: Don't Check [Default]

@CheckUnusedDataEntries=0
// 1: Check
// 0: Don't Check [Default]

@CheckLineLengths=0
// 1: Check
// 0: Don't Check [Default]

@SpecialGameMode=0
// 0: Normal Mode [Default]
// 1: Ib
// 2: Walking on a Star Unknown
// 3: TOWER of HANOI

@ReplacementInputFile=input
// Default: input
// ".txt" extension is automatically added.



// The following settings are for string encoding codepages.
// The main read/write encoding can be changed in-program with 9 and 0, but not the others (which you should usually leave alone).
// Refer to Readme for encoding help. Don't change unless you know what you're doing.

@MainReadEncoding=932
// Default: 932 (Shift-JIS)

@MainWriteEncoding=932
// Default: 932 (Shift-JIS)

@MiscReadEncoding=932
// Default: 932 (Shift-JIS)

@MiscWriteEncoding=932
// Default: 932 (Shift-JIS)

@FilenameReadEncoding=932
// Default: 932 (Shift-JIS)

@FilenameWriteEncoding=932
// Default: 932 (Shift-JIS)